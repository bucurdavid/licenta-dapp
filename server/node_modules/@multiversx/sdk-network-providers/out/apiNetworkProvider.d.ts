import { AxiosRequestConfig } from "axios";
import { AccountOnNetwork, GuardianData } from "./accounts";
import { ContractQueryResponse } from "./contractQueryResponse";
import { IAddress, IContractQuery, INetworkProvider, IPagination, ITransaction } from "./interface";
import { NetworkConfig } from "./networkConfig";
import { NetworkGeneralStatistics } from "./networkGeneralStatistics";
import { NetworkStake } from "./networkStake";
import { NetworkStatus } from "./networkStatus";
import { PairOnNetwork } from "./pairs";
import { DefinitionOfFungibleTokenOnNetwork, DefinitionOfTokenCollectionOnNetwork } from "./tokenDefinitions";
import { FungibleTokenOfAccountOnNetwork, NonFungibleTokenOfAccountOnNetwork } from "./tokens";
import { TransactionOnNetwork } from "./transactions";
import { TransactionStatus } from "./transactionStatus";
export declare class ApiNetworkProvider implements INetworkProvider {
    private url;
    private config;
    private backingProxyNetworkProvider;
    constructor(url: string, config?: AxiosRequestConfig);
    getNetworkConfig(): Promise<NetworkConfig>;
    getNetworkStatus(): Promise<NetworkStatus>;
    getNetworkStakeStatistics(): Promise<NetworkStake>;
    getNetworkGeneralStatistics(): Promise<NetworkGeneralStatistics>;
    getAccount(address: IAddress): Promise<AccountOnNetwork>;
    getGuardianData(address: IAddress): Promise<GuardianData>;
    getFungibleTokensOfAccount(address: IAddress, pagination?: IPagination): Promise<FungibleTokenOfAccountOnNetwork[]>;
    getNonFungibleTokensOfAccount(address: IAddress, pagination?: IPagination): Promise<NonFungibleTokenOfAccountOnNetwork[]>;
    getFungibleTokenOfAccount(address: IAddress, tokenIdentifier: string): Promise<FungibleTokenOfAccountOnNetwork>;
    getNonFungibleTokenOfAccount(address: IAddress, collection: string, nonce: number): Promise<NonFungibleTokenOfAccountOnNetwork>;
    getMexPairs(pagination?: IPagination): Promise<PairOnNetwork[]>;
    getTransaction(txHash: string): Promise<TransactionOnNetwork>;
    getTransactionStatus(txHash: string): Promise<TransactionStatus>;
    sendTransaction(tx: ITransaction): Promise<string>;
    sendTransactions(txs: ITransaction[]): Promise<string[]>;
    simulateTransaction(tx: ITransaction): Promise<any>;
    queryContract(query: IContractQuery): Promise<ContractQueryResponse>;
    getDefinitionOfFungibleToken(tokenIdentifier: string): Promise<DefinitionOfFungibleTokenOnNetwork>;
    getDefinitionOfTokenCollection(collection: string): Promise<DefinitionOfTokenCollectionOnNetwork>;
    getNonFungibleToken(collection: string, nonce: number): Promise<NonFungibleTokenOfAccountOnNetwork>;
    doGetGeneric(resourceUrl: string): Promise<any>;
    doPostGeneric(resourceUrl: string, payload: any): Promise<any>;
    private buildPaginationParams;
    private doGet;
    private doPost;
    private handleApiError;
}
