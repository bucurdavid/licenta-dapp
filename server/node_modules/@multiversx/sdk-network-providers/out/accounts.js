"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuardianData = exports.AccountOnNetwork = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const primitives_1 = require("./primitives");
/**
 * A plain view of an account, as queried from the Network.
 */
class AccountOnNetwork {
    constructor(init) {
        this.address = new primitives_1.Address("");
        this.nonce = 0;
        this.balance = new bignumber_js_1.default(0);
        this.code = "";
        this.userName = "";
        Object.assign(this, init);
    }
    static fromHttpResponse(payload) {
        let result = new AccountOnNetwork();
        result.address = new primitives_1.Address(payload["address"] || "");
        result.nonce = Number(payload["nonce"] || 0);
        result.balance = new bignumber_js_1.default(payload["balance"] || 0);
        result.code = payload["code"] || "";
        result.userName = payload["username"] || "";
        return result;
    }
}
exports.AccountOnNetwork = AccountOnNetwork;
class GuardianData {
    constructor(init) {
        this.guarded = false;
        Object.assign(this, init);
    }
    static fromHttpResponse(response) {
        const result = new GuardianData();
        result.guarded = response["guarded"] || false;
        if (response["activeGuardian"]) {
            result.activeGuardian = Guardian.fromHttpResponse(response["activeGuardian"]);
        }
        if (response["pendingGuardian"]) {
            result.pendingGuardian = Guardian.fromHttpResponse(response["pendingGuardian"]);
        }
        return result;
    }
    getCurrentGuardianAddress() {
        var _a;
        if (!this.guarded) {
            return undefined;
        }
        return (_a = this.activeGuardian) === null || _a === void 0 ? void 0 : _a.address;
    }
}
exports.GuardianData = GuardianData;
class Guardian {
    constructor() {
        this.activationEpoch = 0;
        this.address = new primitives_1.Address("");
        this.serviceUID = "";
    }
    static fromHttpResponse(responsePart) {
        const result = new Guardian();
        result.activationEpoch = Number(responsePart["activationEpoch"] || 0);
        result.address = new primitives_1.Address(responsePart["address"] || "");
        result.serviceUID = responsePart["serviceUID"] || "";
        return result;
    }
}
//# sourceMappingURL=accounts.js.map