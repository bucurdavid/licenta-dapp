"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrBadAddress = exports.ErrSignerCannotSign = exports.ErrBadPEM = exports.ErrWrongMnemonic = exports.ErrInvariantFailed = exports.Err = void 0;
/**
 * The base class for exceptions (errors).
 */
class Err extends Error {
    constructor(message, inner) {
        super(message);
        this.inner = undefined;
        this.inner = inner;
    }
}
exports.Err = Err;
/**
 * Signals that an invariant failed.
 */
class ErrInvariantFailed extends Err {
    constructor(message) {
        super(`"Invariant failed: ${message}`);
    }
}
exports.ErrInvariantFailed = ErrInvariantFailed;
/**
 * Signals a wrong mnemonic format.
 */
class ErrWrongMnemonic extends Err {
    constructor() {
        super("Wrong mnemonic format");
    }
}
exports.ErrWrongMnemonic = ErrWrongMnemonic;
/**
 * Signals a bad PEM file.
 */
class ErrBadPEM extends Err {
    constructor(message) {
        super(message ? `Bad PEM: ${message}` : `Bad PEM`);
    }
}
exports.ErrBadPEM = ErrBadPEM;
/**
 * Signals an error related to signing a message (a transaction).
 */
class ErrSignerCannotSign extends Err {
    constructor(inner) {
        super(`Cannot sign`, inner);
    }
}
exports.ErrSignerCannotSign = ErrSignerCannotSign;
/**
 * Signals a bad address.
 */
class ErrBadAddress extends Err {
    constructor(value, inner) {
        super(`Bad address: ${value}`, inner);
    }
}
exports.ErrBadAddress = ErrBadAddress;
//# sourceMappingURL=errors.js.map