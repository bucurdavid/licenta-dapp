"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidatorPublicKey = exports.ValidatorSecretKey = exports.BLS = exports.VALIDATOR_PUBKEY_LENGTH = exports.VALIDATOR_SECRETKEY_LENGTH = void 0;
const assertions_1 = require("./assertions");
const errors_1 = require("./errors");
const pem_1 = require("./pem");
const bls = require('@multiversx/sdk-bls-wasm');
exports.VALIDATOR_SECRETKEY_LENGTH = 32;
exports.VALIDATOR_PUBKEY_LENGTH = 96;
class BLS {
    static initIfNecessary() {
        return __awaiter(this, void 0, void 0, function* () {
            if (BLS.isInitialized) {
                return;
            }
            yield bls.init(bls.BLS12_381);
            BLS.isInitialized = true;
        });
    }
    static guardInitialized() {
        if (!BLS.isInitialized) {
            throw new errors_1.ErrInvariantFailed("BLS modules are not initalized. Make sure that 'await BLS.initIfNecessary()' is called correctly.");
        }
    }
}
exports.BLS = BLS;
BLS.isInitialized = false;
class ValidatorSecretKey {
    constructor(buffer) {
        BLS.guardInitialized();
        assertions_1.guardLength(buffer, exports.VALIDATOR_SECRETKEY_LENGTH);
        this.secretKey = new bls.SecretKey();
        this.secretKey.setLittleEndian(Uint8Array.from(buffer));
        this.publicKey = this.secretKey.getPublicKey();
    }
    static fromPem(text, index = 0) {
        return pem_1.parseValidatorKey(text, index);
    }
    generatePublicKey() {
        let buffer = Buffer.from(this.publicKey.serialize());
        return new ValidatorPublicKey(buffer);
    }
    sign(message) {
        let signatureObject = this.secretKey.sign(message);
        let signature = Buffer.from(signatureObject.serialize());
        return signature;
    }
    hex() {
        return this.valueOf().toString("hex");
    }
    valueOf() {
        return Buffer.from(this.secretKey.serialize());
    }
}
exports.ValidatorSecretKey = ValidatorSecretKey;
class ValidatorPublicKey {
    constructor(buffer) {
        assertions_1.guardLength(buffer, exports.VALIDATOR_PUBKEY_LENGTH);
        this.buffer = buffer;
    }
    hex() {
        return this.buffer.toString("hex");
    }
    valueOf() {
        return this.buffer;
    }
}
exports.ValidatorPublicKey = ValidatorPublicKey;
//# sourceMappingURL=validatorKeys.js.map