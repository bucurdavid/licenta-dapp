/// <reference types="node" />
import { BigNumber } from "bignumber.js";
import { Hash } from "./hash";
import { IAddress, IChainID, IGasLimit, IGasPrice, INonce, IPlainTransactionObject, ISignature, ITransactionOptions, ITransactionPayload, ITransactionValue, ITransactionVersion } from "./interface";
import { INetworkConfig } from "./interfaceOfNetwork";
import { TransactionOptions, TransactionVersion } from "./networkParams";
/**
 * An abstraction for creating, signing and broadcasting transactions.
 */
export declare class Transaction {
    /**
     * The nonce of the transaction (the account sequence number of the sender).
     */
    private nonce;
    /**
     * The value to transfer.
     */
    private value;
    /**
     * The address of the sender.
     */
    private sender;
    /**
     * The address of the receiver.
     */
    private readonly receiver;
    /**
     * The gas price to be used.
     */
    private gasPrice;
    /**
     * The maximum amount of gas to be consumed when processing the transaction.
     */
    private gasLimit;
    /**
     * The payload of the transaction.
     */
    private readonly data;
    /**
     * The chain ID of the Network (e.g. "1" for Mainnet).
     */
    private chainID;
    /**
     * The version, required by the Network in order to correctly interpret the contents of the transaction.
     * @deprecated Use getVersion() and setVersion() instead.
     */
    version: TransactionVersion;
    /**
     * The options field, useful for describing different settings available for transactions
     * @deprecated Use getOptions() and setOptions() instead.
     */
    options: TransactionOptions;
    /**
     * The address of the guardian.
     */
    private guardian;
    /**
     * The signature.
     */
    private signature;
    /**
     * The signature of the guardian.
     */
    private guardianSignature;
    /**
     * The transaction hash, also used as a transaction identifier.
     */
    private hash;
    /**
     * Creates a new Transaction object.
     */
    constructor({ nonce, value, receiver, sender, gasPrice, gasLimit, data, chainID, version, options, guardian, }: {
        nonce?: INonce;
        value?: ITransactionValue;
        receiver: IAddress;
        sender: IAddress;
        gasPrice?: IGasPrice;
        gasLimit: IGasLimit;
        data?: ITransactionPayload;
        chainID: IChainID;
        version?: ITransactionVersion;
        options?: ITransactionOptions;
        guardian?: IAddress;
    });
    getNonce(): INonce;
    /**
     * Sets the account sequence number of the sender. Must be done prior signing.
     */
    setNonce(nonce: INonce): void;
    getValue(): ITransactionValue;
    setValue(value: ITransactionValue): void;
    getSender(): IAddress;
    setSender(sender: IAddress): void;
    getReceiver(): IAddress;
    getGuardian(): IAddress;
    getGasPrice(): IGasPrice;
    setGasPrice(gasPrice: IGasPrice): void;
    getGasLimit(): IGasLimit;
    setGasLimit(gasLimit: IGasLimit): void;
    getData(): ITransactionPayload;
    getChainID(): IChainID;
    setChainID(chainID: IChainID): void;
    getVersion(): TransactionVersion;
    setVersion(version: ITransactionVersion): void;
    getOptions(): TransactionOptions;
    setOptions(options: ITransactionOptions): void;
    getSignature(): Buffer;
    getGuardianSignature(): Buffer;
    setGuardian(guardian: IAddress): void;
    getHash(): TransactionHash;
    /**
     * Serializes a transaction to a sequence of bytes, ready to be signed.
     * This function is called internally by signers.
     */
    serializeForSigning(): Buffer;
    /**
     * Checks the integrity of the guarded transaction
     */
    isGuardedTransaction(): boolean;
    /**
     * Converts the transaction object into a ready-to-serialize, plain JavaScript object.
     * This function is called internally within the signing procedure.
     */
    toPlainObject(): IPlainTransactionObject;
    /**
     * Converts a plain object transaction into a Transaction Object.
     *
     * @param plainObjectTransaction Raw data of a transaction, usually obtained by calling toPlainObject()
     */
    static fromPlainObject(plainObjectTransaction: IPlainTransactionObject): Transaction;
    /**
     * Applies the signature on the transaction.
     *
     * @param signature The signature, as computed by a signer.
     */
    applySignature(signature: ISignature | Buffer): void;
    /**
   * Applies the guardian signature on the transaction.
   *
   * @param guardianSignature The signature, as computed by a signer.
   */
    applyGuardianSignature(guardianSignature: ISignature | Buffer): void;
    /**
     * Converts a transaction to a ready-to-broadcast object.
     * Called internally by the network provider.
     */
    toSendable(): any;
    /**
     * Computes the current transaction fee based on the {@link NetworkConfig} and transaction properties
     * @param networkConfig {@link NetworkConfig}
     */
    computeFee(networkConfig: INetworkConfig): BigNumber;
}
/**
 * An abstraction for handling and computing transaction hashes.
 */
export declare class TransactionHash extends Hash {
    constructor(hash: string);
    /**
     * Computes the hash of a transaction.
     */
    static compute(transaction: Transaction): TransactionHash;
}
