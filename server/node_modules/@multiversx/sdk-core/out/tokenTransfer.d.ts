import BigNumber from "bignumber.js";
interface ITokenTransferOptions {
    tokenIdentifier: string;
    nonce: number;
    amountAsBigInteger: BigNumber.Value;
    numDecimals: number;
}
export declare class TokenTransfer {
    readonly tokenIdentifier: string;
    readonly nonce: number;
    readonly amountAsBigInteger: BigNumber;
    readonly numDecimals: number;
    protected constructor(options: ITokenTransferOptions);
    static egldFromAmount(amount: BigNumber.Value): TokenTransfer;
    static egldFromBigInteger(amountAsBigInteger: BigNumber.Value): TokenTransfer;
    static fungibleFromAmount(tokenIdentifier: string, amount: BigNumber.Value, numDecimals: number): TokenTransfer;
    static fungibleFromBigInteger(tokenIdentifier: string, amountAsBigInteger: BigNumber.Value, numDecimals?: number): TokenTransfer;
    static nonFungible(tokenIdentifier: string, nonce: number): TokenTransfer;
    static semiFungible(tokenIdentifier: string, nonce: number, quantity: number): TokenTransfer;
    static metaEsdtFromAmount(tokenIdentifier: string, nonce: number, amount: BigNumber.Value, numDecimals: number): TokenTransfer;
    static metaEsdtFromBigInteger(tokenIdentifier: string, nonce: number, amountAsBigInteger: BigNumber.Value, numDecimals?: number): TokenTransfer;
    toString(): string;
    valueOf(): BigNumber;
    toPrettyString(): string;
    private toAmount;
    isEgld(): boolean;
    isFungible(): boolean;
}
/**
 * @deprecated use {@link TokenTransfer} instead.
 */
export declare class TokenPayment extends TokenTransfer {
    constructor(tokenIdentifier: string, nonce: number, amountAsBigInteger: BigNumber.Value, numDecimals: number);
}
export {};
