"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartContract = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const address_1 = require("../address");
const compatibility_1 = require("../compatibility");
const errors_1 = require("../errors");
const transaction_1 = require("../transaction");
const utils_1 = require("../utils");
const utils_2 = require("./codec/utils");
const codeMetadata_1 = require("./codeMetadata");
const function_1 = require("./function");
const interaction_1 = require("./interaction");
const nativeSerializer_1 = require("./nativeSerializer");
const query_1 = require("./query");
const transactionPayloadBuilders_1 = require("./transactionPayloadBuilders");
const createKeccakHash = require("keccak");
/**
 * An abstraction for deploying and interacting with Smart Contracts.
 */
class SmartContract {
    /**
     * Create a SmartContract object by providing its address on the Network.
     */
    constructor(options = {}) {
        this.address = new address_1.Address();
        /**
         * This object contains a function for each endpoint defined by the contract.
         * (a bit similar to web3js's "contract.methods").
         */
        this.methodsExplicit = {};
        /**
         * This object contains a function for each endpoint defined by the contract.
         * (a bit similar to web3js's "contract.methods").
         *
         * This is an alternative to {@link methodsExplicit}.
         * Unlike {@link methodsExplicit}, automatic type inference (wrt. ABI) is applied when using {@link methods}.
         */
        this.methods = {};
        this.address = options.address || new address_1.Address();
        this.abi = options.abi;
        if (this.abi) {
            this.setupMethods();
        }
    }
    setupMethods() {
        let contract = this;
        let abi = this.getAbi();
        for (const definition of abi.getEndpoints()) {
            let functionName = definition.name;
            // For each endpoint defined by the ABI, we attach a function to the "methods" and "methodsAuto" objects,
            // a function that receives typed values as arguments
            // and returns a prepared contract interaction.
            this.methodsExplicit[functionName] = function (args) {
                let func = new function_1.ContractFunction(functionName);
                let interaction = new interaction_1.Interaction(contract, func, args || []);
                return interaction;
            };
            this.methods[functionName] = function (args) {
                let func = new function_1.ContractFunction(functionName);
                // Perform automatic type inference, wrt. the endpoint definition:
                let typedArgs = nativeSerializer_1.NativeSerializer.nativeToTypedValues(args || [], definition);
                let interaction = new interaction_1.Interaction(contract, func, typedArgs || []);
                return interaction;
            };
        }
    }
    /**
     * Sets the address, as on Network.
     */
    setAddress(address) {
        this.address = address;
    }
    /**
     * Gets the address, as on Network.
     */
    getAddress() {
        return this.address;
    }
    getAbi() {
        utils_1.guardValueIsSet("abi", this.abi);
        return this.abi;
    }
    getEndpoint(name) {
        return this.getAbi().getEndpoint(name);
    }
    /**
     * Creates a {@link Transaction} for deploying the Smart Contract to the Network.
     */
    deploy({ deployer, code, codeMetadata, initArguments, value, gasLimit, gasPrice, chainID }) {
        compatibility_1.Compatibility.guardAddressIsSetAndNonZero(deployer, "'deployer' of SmartContract.deploy()", "pass the actual address to deploy()");
        codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();
        initArguments = initArguments || [];
        value = value || 0;
        let payload = new transactionPayloadBuilders_1.ContractDeployPayloadBuilder()
            .setCode(code)
            .setCodeMetadata(codeMetadata)
            .setInitArgs(initArguments)
            .build();
        let transaction = new transaction_1.Transaction({
            receiver: address_1.Address.Zero(),
            sender: deployer,
            value: value,
            gasLimit: gasLimit,
            gasPrice: gasPrice,
            data: payload,
            chainID: chainID
        });
        return transaction;
    }
    /**
     * Creates a {@link Transaction} for upgrading the Smart Contract on the Network.
     */
    upgrade({ caller, code, codeMetadata, initArguments, value, gasLimit, gasPrice, chainID }) {
        compatibility_1.Compatibility.guardAddressIsSetAndNonZero(caller, "'caller' of SmartContract.upgrade()", "pass the actual address to upgrade()");
        this.ensureHasAddress();
        codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();
        initArguments = initArguments || [];
        value = value || 0;
        let payload = new transactionPayloadBuilders_1.ContractUpgradePayloadBuilder()
            .setCode(code)
            .setCodeMetadata(codeMetadata)
            .setInitArgs(initArguments)
            .build();
        let transaction = new transaction_1.Transaction({
            sender: caller,
            receiver: this.getAddress(),
            value: value,
            gasLimit: gasLimit,
            gasPrice: gasPrice,
            data: payload,
            chainID: chainID
        });
        return transaction;
    }
    /**
     * Creates a {@link Transaction} for calling (a function of) the Smart Contract.
     */
    call({ func, args, value, gasLimit, receiver, gasPrice, chainID, caller }) {
        compatibility_1.Compatibility.guardAddressIsSetAndNonZero(caller, "'caller' of SmartContract.call()", "pass the actual address to call()");
        this.ensureHasAddress();
        args = args || [];
        value = value || 0;
        let payload = new transactionPayloadBuilders_1.ContractCallPayloadBuilder()
            .setFunction(func)
            .setArgs(args)
            .build();
        let transaction = new transaction_1.Transaction({
            sender: caller,
            receiver: receiver ? receiver : this.getAddress(),
            value: value,
            gasLimit: gasLimit,
            gasPrice: gasPrice,
            data: payload,
            chainID: chainID,
        });
        return transaction;
    }
    createQuery({ func, args, value, caller }) {
        this.ensureHasAddress();
        return new query_1.Query({
            address: this.getAddress(),
            func: func,
            args: args,
            value: value,
            caller: caller
        });
    }
    ensureHasAddress() {
        if (!this.getAddress().bech32()) {
            throw new errors_1.ErrContractHasNoAddress();
        }
    }
    /**
     * Computes the address of a Smart Contract.
     * The address is computed deterministically, from the address of the owner and the nonce of the deployment transaction.
     *
     * @param owner The owner of the Smart Contract
     * @param nonce The owner nonce used for the deployment transaction
     */
    static computeAddress(owner, nonce) {
        let initialPadding = Buffer.alloc(8, 0);
        let ownerPubkey = new address_1.Address(owner.bech32()).pubkey();
        let shardSelector = ownerPubkey.slice(30);
        let ownerNonceBytes = Buffer.alloc(8);
        const bigNonce = new bignumber_js_1.default(nonce.valueOf().toString(10));
        const bigNonceBuffer = utils_2.bigIntToBuffer(bigNonce);
        ownerNonceBytes.write(bigNonceBuffer.reverse().toString('hex'), 'hex');
        let bytesToHash = Buffer.concat([ownerPubkey, ownerNonceBytes]);
        let hash = createKeccakHash("keccak256").update(bytesToHash).digest();
        let vmTypeBytes = Buffer.from(transactionPayloadBuilders_1.ArwenVirtualMachine, "hex");
        let addressBytes = Buffer.concat([
            initialPadding,
            vmTypeBytes,
            hash.slice(10, 30),
            shardSelector
        ]);
        let address = new address_1.Address(addressBytes);
        return address;
    }
}
exports.SmartContract = SmartContract;
//# sourceMappingURL=smartContract.js.map