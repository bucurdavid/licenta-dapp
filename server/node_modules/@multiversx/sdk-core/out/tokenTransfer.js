"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenPayment = exports.TokenTransfer = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const errors_1 = require("./errors");
const EGLDTokenIdentifier = "EGLD";
const EGLDNumDecimals = 18;
// Note: this will actually set the default rounding mode for all BigNumber objects in the environment (in the application / dApp).
bignumber_js_1.default.set({ ROUNDING_MODE: 1 });
class TokenTransfer {
    constructor(options) {
        const amount = new bignumber_js_1.default(options.amountAsBigInteger);
        if (!amount.isInteger() || amount.isNegative()) {
            throw new errors_1.ErrInvalidArgument(`bad amountAsBigInteger: ${options.amountAsBigInteger}`);
        }
        this.tokenIdentifier = options.tokenIdentifier;
        this.nonce = options.nonce;
        this.amountAsBigInteger = amount;
        this.numDecimals = options.numDecimals;
    }
    static egldFromAmount(amount) {
        const amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(EGLDNumDecimals).decimalPlaces(0);
        return this.egldFromBigInteger(amountAsBigInteger);
    }
    static egldFromBigInteger(amountAsBigInteger) {
        return new TokenTransfer({
            tokenIdentifier: EGLDTokenIdentifier,
            nonce: 0,
            amountAsBigInteger,
            numDecimals: EGLDNumDecimals,
        });
    }
    static fungibleFromAmount(tokenIdentifier, amount, numDecimals) {
        const amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);
        return this.fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger, numDecimals);
    }
    static fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger, numDecimals = 0) {
        return new TokenTransfer({
            tokenIdentifier,
            nonce: 0,
            amountAsBigInteger,
            numDecimals,
        });
    }
    static nonFungible(tokenIdentifier, nonce) {
        return new TokenTransfer({
            tokenIdentifier,
            nonce,
            amountAsBigInteger: 1,
            numDecimals: 0,
        });
    }
    static semiFungible(tokenIdentifier, nonce, quantity) {
        return new TokenTransfer({
            tokenIdentifier,
            nonce,
            amountAsBigInteger: quantity,
            numDecimals: 0,
        });
    }
    static metaEsdtFromAmount(tokenIdentifier, nonce, amount, numDecimals) {
        const amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);
        return this.metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);
    }
    static metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger, numDecimals = 0) {
        return new TokenTransfer({
            tokenIdentifier,
            nonce,
            amountAsBigInteger,
            numDecimals,
        });
    }
    toString() {
        return this.amountAsBigInteger.toFixed(0);
    }
    valueOf() {
        return this.amountAsBigInteger;
    }
    toPrettyString() {
        return `${this.toAmount()} ${this.tokenIdentifier}`;
    }
    toAmount() {
        return this.amountAsBigInteger.shiftedBy(-this.numDecimals).toFixed(this.numDecimals);
    }
    isEgld() {
        return this.tokenIdentifier == EGLDTokenIdentifier;
    }
    isFungible() {
        return this.nonce == 0;
    }
}
exports.TokenTransfer = TokenTransfer;
/**
 * @deprecated use {@link TokenTransfer} instead.
 */
class TokenPayment extends TokenTransfer {
    constructor(tokenIdentifier, nonce, amountAsBigInteger, numDecimals) {
        super({
            tokenIdentifier,
            nonce,
            amountAsBigInteger,
            numDecimals,
        });
    }
}
exports.TokenPayment = TokenPayment;
;
//# sourceMappingURL=tokenTransfer.js.map