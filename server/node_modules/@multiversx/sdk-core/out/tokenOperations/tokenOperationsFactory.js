"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenOperationsFactory = void 0;
const constants_1 = require("../constants");
const networkParams_1 = require("../networkParams");
const transaction_1 = require("../transaction");
const transactionPayload_1 = require("../transactionPayload");
const codec_1 = require("./codec");
class TokenOperationsFactory {
    constructor(config) {
        this.config = config;
        this.trueAsHex = codec_1.utf8ToHex("true");
    }
    issueFungible(args) {
        const parts = [
            "issue",
            codec_1.utf8ToHex(args.tokenName),
            codec_1.utf8ToHex(args.tokenTicker),
            codec_1.bigIntToHex(args.initialSupply),
            codec_1.bigIntToHex(args.numDecimals),
            ...(args.canFreeze ? [codec_1.utf8ToHex("canFreeze"), this.trueAsHex] : []),
            ...(args.canWipe ? [codec_1.utf8ToHex("canWipe"), this.trueAsHex] : []),
            ...(args.canPause ? [codec_1.utf8ToHex("canPause"), this.trueAsHex] : []),
            ...(args.canMint ? [codec_1.utf8ToHex("canMint"), this.trueAsHex] : []),
            ...(args.canBurn ? [codec_1.utf8ToHex("canBurn"), this.trueAsHex] : []),
            ...(args.canChangeOwner ? [codec_1.utf8ToHex("canChangeOwner"), this.trueAsHex] : []),
            ...(args.canUpgrade ? [codec_1.utf8ToHex("canUpgrade"), this.trueAsHex] : []),
            ...(args.canAddSpecialRoles ? [codec_1.utf8ToHex("canAddSpecialRoles"), this.trueAsHex] : []),
        ];
        return this.createTransaction({
            sender: args.issuer,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            value: this.config.issueCost,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitIssue,
            dataParts: parts
        });
    }
    issueSemiFungible(args) {
        const parts = [
            "issueSemiFungible",
            codec_1.utf8ToHex(args.tokenName),
            codec_1.utf8ToHex(args.tokenTicker),
            ...(args.canFreeze ? [codec_1.utf8ToHex("canFreeze"), this.trueAsHex] : []),
            ...(args.canWipe ? [codec_1.utf8ToHex("canWipe"), this.trueAsHex] : []),
            ...(args.canPause ? [codec_1.utf8ToHex("canPause"), this.trueAsHex] : []),
            ...(args.canTransferNFTCreateRole ? [codec_1.utf8ToHex("canTransferNFTCreateRole"), this.trueAsHex] : []),
            ...(args.canChangeOwner ? [codec_1.utf8ToHex("canChangeOwner"), this.trueAsHex] : []),
            ...(args.canUpgrade ? [codec_1.utf8ToHex("canUpgrade"), this.trueAsHex] : []),
            ...(args.canAddSpecialRoles ? [codec_1.utf8ToHex("canAddSpecialRoles"), this.trueAsHex] : []),
        ];
        return this.createTransaction({
            sender: args.issuer,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            value: this.config.issueCost,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitIssue,
            dataParts: parts
        });
    }
    issueNonFungible(args) {
        const parts = [
            "issueNonFungible",
            codec_1.utf8ToHex(args.tokenName),
            codec_1.utf8ToHex(args.tokenTicker),
            ...(args.canFreeze ? [codec_1.utf8ToHex("canFreeze"), this.trueAsHex] : []),
            ...(args.canWipe ? [codec_1.utf8ToHex("canWipe"), this.trueAsHex] : []),
            ...(args.canPause ? [codec_1.utf8ToHex("canPause"), this.trueAsHex] : []),
            ...(args.canTransferNFTCreateRole ? [codec_1.utf8ToHex("canTransferNFTCreateRole"), this.trueAsHex] : []),
            ...(args.canChangeOwner ? [codec_1.utf8ToHex("canChangeOwner"), this.trueAsHex] : []),
            ...(args.canUpgrade ? [codec_1.utf8ToHex("canUpgrade"), this.trueAsHex] : []),
            ...(args.canAddSpecialRoles ? [codec_1.utf8ToHex("canAddSpecialRoles"), this.trueAsHex] : []),
        ];
        return this.createTransaction({
            sender: args.issuer,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            value: this.config.issueCost,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitIssue,
            dataParts: parts
        });
    }
    registerMetaESDT(args) {
        const parts = [
            "registerMetaESDT",
            codec_1.utf8ToHex(args.tokenName),
            codec_1.utf8ToHex(args.tokenTicker),
            codec_1.bigIntToHex(args.numDecimals),
            ...(args.canFreeze ? [codec_1.utf8ToHex("canFreeze"), this.trueAsHex] : []),
            ...(args.canWipe ? [codec_1.utf8ToHex("canWipe"), this.trueAsHex] : []),
            ...(args.canPause ? [codec_1.utf8ToHex("canPause"), this.trueAsHex] : []),
            ...(args.canTransferNFTCreateRole ? [codec_1.utf8ToHex("canTransferNFTCreateRole"), this.trueAsHex] : []),
            ...(args.canChangeOwner ? [codec_1.utf8ToHex("canChangeOwner"), this.trueAsHex] : []),
            ...(args.canUpgrade ? [codec_1.utf8ToHex("canUpgrade"), this.trueAsHex] : []),
            ...(args.canAddSpecialRoles ? [codec_1.utf8ToHex("canAddSpecialRoles"), this.trueAsHex] : []),
        ];
        return this.createTransaction({
            sender: args.issuer,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            value: this.config.issueCost,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitIssue,
            dataParts: parts
        });
    }
    setSpecialRoleOnFungible(args) {
        const parts = [
            "setSpecialRole",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.addressToHex(args.user),
            ...(args.addRoleLocalMint ? [codec_1.utf8ToHex("ESDTRoleLocalMint")] : []),
            ...(args.addRoleLocalBurn ? [codec_1.utf8ToHex("ESDTRoleLocalBurn")] : []),
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitSetSpecialRole,
            dataParts: parts
        });
    }
    setSpecialRoleOnSemiFungible(args) {
        const parts = [
            "setSpecialRole",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.addressToHex(args.user),
            ...(args.addRoleNFTCreate ? [codec_1.utf8ToHex("ESDTRoleNFTCreate")] : []),
            ...(args.addRoleNFTBurn ? [codec_1.utf8ToHex("ESDTRoleNFTBurn")] : []),
            ...(args.addRoleNFTAddQuantity ? [codec_1.utf8ToHex("ESDTRoleNFTAddQuantity")] : []),
            ...(args.addRoleESDTTransferRole ? [codec_1.utf8ToHex("ESDTTransferRole")] : []),
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitSetSpecialRole,
            dataParts: parts
        });
    }
    setSpecialRoleOnMetaESDT(args) {
        return this.setSpecialRoleOnSemiFungible(args);
    }
    setSpecialRoleOnNonFungible(args) {
        const parts = [
            "setSpecialRole",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.addressToHex(args.user),
            ...(args.addRoleNFTCreate ? [codec_1.utf8ToHex("ESDTRoleNFTCreate")] : []),
            ...(args.addRoleNFTBurn ? [codec_1.utf8ToHex("ESDTRoleNFTBurn")] : []),
            ...(args.addRoleNFTUpdateAttributes ? [codec_1.utf8ToHex("ESDTRoleNFTUpdateAttributes")] : []),
            ...(args.addRoleNFTAddURI ? [codec_1.utf8ToHex("ESDTRoleNFTAddURI")] : []),
            ...(args.addRoleESDTTransferRole ? [codec_1.utf8ToHex("ESDTTransferRole")] : []),
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitSetSpecialRole,
            dataParts: parts
        });
    }
    nftCreate(args) {
        const parts = [
            "ESDTNFTCreate",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.bigIntToHex(args.initialQuantity),
            codec_1.utf8ToHex(args.name),
            codec_1.bigIntToHex(args.royalties),
            codec_1.utf8ToHex(args.hash),
            codec_1.bufferToHex(args.attributes),
            ...args.uris.map(codec_1.utf8ToHex),
        ];
        // Note that the following is an approximation (a reasonable one):
        const nftData = args.name + args.hash + args.attributes + args.uris.join("");
        const storageGasLimit = nftData.length * this.config.gasLimitStorePerByte.valueOf();
        return this.createTransaction({
            sender: args.creator,
            receiver: args.creator,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitESDTNFTCreate.valueOf() + storageGasLimit.valueOf(),
            dataParts: parts
        });
    }
    pause(args) {
        const parts = [
            "pause",
            codec_1.utf8ToHex(args.tokenIdentifier)
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitPausing,
            dataParts: parts
        });
    }
    unpause(args) {
        const parts = [
            "unPause",
            codec_1.utf8ToHex(args.tokenIdentifier)
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitPausing,
            dataParts: parts
        });
    }
    freeze(args) {
        const parts = [
            "freeze",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.addressToHex(args.user)
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitFreezing,
            dataParts: parts
        });
    }
    unfreeze(args) {
        const parts = [
            "unFreeze",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.addressToHex(args.user)
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitFreezing,
            dataParts: parts
        });
    }
    wipe(args) {
        const parts = [
            "wipe",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.addressToHex(args.user)
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: this.config.esdtContractAddress,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitWiping,
            dataParts: parts
        });
    }
    localMint(args) {
        const parts = [
            "ESDTLocalMint",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.bigIntToHex(args.supplyToMint),
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: args.manager,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitESDTLocalMint,
            dataParts: parts
        });
    }
    localBurn(args) {
        const parts = [
            "ESDTLocalBurn",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.bigIntToHex(args.supplyToBurn),
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: args.manager,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitESDTLocalBurn,
            dataParts: parts
        });
    }
    updateAttributes(args) {
        const parts = [
            "ESDTNFTUpdateAttributes",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.bigIntToHex(args.tokenNonce),
            codec_1.bufferToHex(args.attributes),
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: args.manager,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitESDTNFTUpdateAttributes,
            dataParts: parts
        });
    }
    addQuantity(args) {
        const parts = [
            "ESDTNFTAddQuantity",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.bigIntToHex(args.tokenNonce),
            codec_1.bigIntToHex(args.quantityToAdd)
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: args.manager,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitESDTNFTAddQuantity,
            dataParts: parts
        });
    }
    burnQuantity(args) {
        const parts = [
            "ESDTNFTBurn",
            codec_1.utf8ToHex(args.tokenIdentifier),
            codec_1.bigIntToHex(args.tokenNonce),
            codec_1.bigIntToHex(args.quantityToBurn)
        ];
        return this.createTransaction({
            sender: args.manager,
            receiver: args.manager,
            nonce: args.transactionNonce,
            gasPrice: args.gasPrice,
            gasLimitHint: args.gasLimit,
            executionGasLimit: this.config.gasLimitESDTNFTBurn,
            dataParts: parts
        });
    }
    createTransaction({ sender, receiver, nonce, value, gasPrice, gasLimitHint, executionGasLimit, dataParts }) {
        const payload = this.buildTransactionPayload(dataParts);
        const gasLimit = gasLimitHint || this.computeGasLimit(payload, executionGasLimit);
        const version = new networkParams_1.TransactionVersion(constants_1.TRANSACTION_VERSION_DEFAULT);
        const options = new networkParams_1.TransactionOptions(constants_1.TRANSACTION_OPTIONS_DEFAULT);
        return new transaction_1.Transaction({
            chainID: this.config.chainID,
            sender: sender,
            receiver: receiver,
            gasLimit: gasLimit,
            gasPrice: gasPrice,
            nonce: nonce || 0,
            value: value || 0,
            data: payload,
            version: version,
            options: options
        });
    }
    buildTransactionPayload(parts) {
        const data = parts.join(constants_1.ARGUMENTS_SEPARATOR);
        return new transactionPayload_1.TransactionPayload(data);
    }
    computeGasLimit(payload, executionGas) {
        const dataMovementGas = this.config.minGasLimit.valueOf() + this.config.gasLimitPerByte.valueOf() * payload.length();
        return dataMovementGas + executionGas.valueOf();
    }
}
exports.TokenOperationsFactory = TokenOperationsFactory;
//# sourceMappingURL=tokenOperationsFactory.js.map